clc; clear; close all;
load optdigits.tra.csv
load optdigits.tes.csv
data_test = optdigits_tes(:,1:end-1);
class_test = optdigits_tes(:,end);
data_train = optdigits_tra(:,1:end-1);
class_train = optdigits_tra(:,end);

target_train = zeros(length(optdigits_tra),10);
for i = 1:length(optdigits_tra)
    for j = 1:10
       if class_train(i) == j-1
            target_train(i,j) = 1;
       end
    end
end

target_test = zeros(length(optdigits_tes),10);
for i = 1:length(optdigits_tes)
    for j = 1:10
       if class_test(i) == j-1
            target_test(i,j) = 1;
       end
    end
end
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
%
% This script assumes these variables are defined:
%
%   cancerInputs - input data.
%   cancerTargets - target data.

inputs_tra = data_train';
targets_tra = target_train';
inputs_tes = data_test';
targets_tes = target_test';

% Create a Pattern Recognition Network
% hiddenLayerSize = 10;
net = patternnet([10,6]);


% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;


% Train the Network
[net,tr] = train(net,inputs_tra,targets_tra);

% Test the Network
outputs = net(inputs_tra);
errors = gsubtract(targets_tra,outputs);
performance = perform(net,targets_tra,outputs)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
% figure(1), plotperform(tr)
% figure(2), plottrainstate(tr)
% figure(3), plotconfusion(targets_tra,outputs)
% figure(4), ploterrhist(errors)

% Test the Network with independent test dataset
outputs_tes = net(inputs_tes);
out = zeros(size(outputs_tes));
%%
for i = 1:length(data_test)
    out(find(outputs_tes(:,i) == max(outputs_tes(:,i))),i) = 1;
end
%%
temp = 0;
flag = 1;
target_test = target_test';
for i = 1: length(data_test)
    if out(:,i) == target_test(:,i)
        temp = temp+1;
    end
end
accuracy = temp/length(data_test)
t_errors = gsubtract(targets_tes,outputs_tes);
t_performance = perform(net,targets_tes,outputs_tes)
    
